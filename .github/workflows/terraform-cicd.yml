name: Terraform CI/CD

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action (plan/apply/destroy/apply-and-deploy)'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
          - apply-and-deploy
      confirm:
        description: '–í–≤–µ–¥–∏—Ç–µ ¬´yes¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è apply/destroy/apply-and-deploy)'
        required: false
        default: 'no'

jobs:
  terraform:
    name: 'Terraform –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VAR_token: ${{ secrets.YC_TOKEN }}
      TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
      TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
      TF_VAR_s3_access_key: ${{ secrets.YC_S3_ACCESS_KEY }}
      TF_VAR_s3_secret_key: ${{ secrets.YC_S3_SECRET_KEY }}
      TF_VAR_s3_bucket_name: ${{ secrets.YC_S3_BUCKET_NAME }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
        uses: actions/checkout@v4

      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"

      - name: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform
        run: |
          terraform init \
            -backend-config="endpoint=https://storage.yandexcloud.net" \
            -backend-config="bucket=${{ secrets.YC_S3_BUCKET_NAME }}" \
            -backend-config="region=ru-central1" \
            -backend-config="access_key=${{ secrets.YC_S3_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.YC_S3_SECRET_KEY }}"

      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        run: terraform fmt -check -recursive

      - name: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        run: terraform validate

      - name: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if: contains(github.event.inputs.action, 'plan') || contains(github.event.inputs.action, 'apply')
        run: terraform plan -out=tfplan

      - name: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if: (github.event.inputs.action == 'apply' || github.event.inputs.action == 'apply-and-deploy') && github.event.inputs.confirm == 'yes'
        run: terraform apply -auto-approve tfplan

      - name: –ü–ª–∞–Ω —É–¥–∞–ª–µ–Ω–∏—è
        if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm == 'yes'
        run: terraform plan -destroy -out=tfdestroy

      - name: –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm == 'yes'
        run: terraform apply -auto-approve tfdestroy

      - name: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ inventory-—Ñ–∞–π–ª–∞ –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        if: success() && (github.event.inputs.action == 'apply-and-deploy' || github.event.inputs.action == 'apply')
        uses: actions/upload-artifact@v4
        with:
          name: kubespray-inventory
          path: kubespray/inventory/hosts.yaml
          retention-days: 1
          if-no-files-found: error

  deploy-k8s:
    name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes'
    needs: terraform
    if: (github.event.inputs.action == 'deploy-k8s' || github.event.inputs.action == 'apply-and-deploy') && github.event.inputs.confirm == 'yes'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: üì• –ó–∞–≥—Ä—É–∑–∫–∞ inventory –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        uses: actions/download-artifact@v4
        with:
          name: kubespray-inventory
          path: kubespray/inventory

      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ inventory-—Ñ–∞–π–ª–∞
        run: |
          if [ ! -f "kubespray/inventory/hosts.yaml" ]; then
            echo "::error::Inventory file not found at kubespray/inventory/hosts.yaml"
            echo "Available files:"
            ls -R kubespray || true
            exit 1
          fi
          echo "Inventory file verified:"
          cat kubespray/inventory/hosts.yaml

      - name: üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes —á–µ—Ä–µ–∑ Kubespray
        run: |
          echo "üîÑ –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
          sudo apt update && sudo apt install -y python3-pip sshpass git
          pip3 install ansible

          echo "üìÅ –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Kubespray"
          if [ -d "kubespray" ]; then
            echo "–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ø–∏—é Kubespray"
            cd kubespray
            git pull
          else
            echo "–ö–ª–æ–Ω–∏—Ä—É–µ–º Kubespray"
            git clone https://github.com/kubernetes-sigs/kubespray.git
            cd kubespray
          fi
          
          echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python"
          pip3 install -r requirements.txt

          echo "üîê –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–∫–ª—é—á–∞"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          echo "üåê –®–∞–≥ 4: –¢–µ—Å—Ç SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
          ansible -i ../kubespray/inventory/hosts.yaml all -m ping --private-key=~/.ssh/id_rsa -u ubuntu || {
            echo "::error::SSH connection failed"
            exit 1
          }

          echo "üî• –®–∞–≥ 5: –ó–∞–ø—É—Å–∫ Kubespray Playbook"
          ansible-playbook -i ../kubespray/inventory/hosts.yaml cluster.yml \
            --private-key=~/.ssh/id_rsa \
            -u ubuntu \
            -b \
            --become-user=root || {
              echo "::error::Kubespray deployment failed"
              exit 1
            }

          echo "üßπ –®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞"
          rm -f ~/.ssh/id_rsa

          echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"