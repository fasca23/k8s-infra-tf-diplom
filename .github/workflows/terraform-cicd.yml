name: Terraform CI/CD

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action (plan/apply/destroy/apply-and-deploy)'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
          - apply-and-deploy
      confirm:
        description: '–í–≤–µ–¥–∏—Ç–µ ¬´yes¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è apply/destroy/apply-and-deploy)'
        required: false
        default: 'no'

jobs:
  terraform:
    name: 'Terraform –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VAR_token: ${{ secrets.YC_TOKEN }}
      TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
      TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
      TF_VAR_s3_access_key: ${{ secrets.YC_S3_ACCESS_KEY }}
      TF_VAR_s3_secret_key: ${{ secrets.YC_S3_SECRET_KEY }}
      TF_VAR_s3_bucket_name: ${{ secrets.YC_S3_BUCKET_NAME }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
        uses: actions/checkout@v4

      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"

      - name: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform
        run: |
          terraform init \
            -backend-config="endpoint=https://storage.yandexcloud.net" \
            -backend-config="bucket=${{ secrets.YC_S3_BUCKET_NAME }}" \
            -backend-config="region=ru-central1" \
            -backend-config="access_key=${{ secrets.YC_S3_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.YC_S3_SECRET_KEY }}"

      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        run: terraform fmt -check -recursive

      - name: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        run: terraform validate

      - name: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if: contains(github.event.inputs.action, 'plan') || contains(github.event.inputs.action, 'apply')
        run: terraform plan -out=tfplan

      - name: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if: (github.event.inputs.action == 'apply' || github.event.inputs.action == 'apply-and-deploy') && github.event.inputs.confirm == 'yes'
        run: terraform apply -auto-approve tfplan

      - name: –ü–ª–∞–Ω —É–¥–∞–ª–µ–Ω–∏—è
        if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm == 'yes'
        run: terraform plan -destroy -out=tfdestroy

      - name: –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm == 'yes'
        run: terraform apply -auto-approve tfdestroy

      - name: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ inventory-—Ñ–∞–π–ª–∞ –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        if: success() && (github.event.inputs.action == 'apply-and-deploy' || github.event.inputs.action == 'apply')
        uses: actions/upload-artifact@v4
        with:
          name: kubespray-inventory
          path: kubespray/inventory/hosts.yaml
          retention-days: 1
          if-no-files-found: error

  deploy-k8s:
    name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes'
    needs: terraform
    if: (github.event.inputs.action == 'deploy-k8s' || github.event.inputs.action == 'apply-and-deploy') && github.event.inputs.confirm == 'yes'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: üì• –ó–∞–≥—Ä—É–∑–∫–∞ inventory –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        uses: actions/download-artifact@v4
        with:
          name: kubespray-inventory
          path: kubespray/inventory

      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ inventory-—Ñ–∞–π–ª–∞
        run: |
          if [ ! -f "kubespray/inventory/hosts.yaml" ]; then
            echo "::error::Inventory file not found at kubespray/inventory/hosts.yaml"
            echo "Available files:"
            ls -R kubespray || true
            exit 1
          fi
          echo "Inventory file verified:"
          cat kubespray/inventory/hosts.yaml

      - name: üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes —á–µ—Ä–µ–∑ Kubespray
        run: |
          echo "üîÑ –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
          sudo apt update && sudo apt install -y python3-pip sshpass git
          pip3 install ansible

          echo "üìÅ –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Kubespray"
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º inventory —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ -f "kubespray/inventory/hosts.yaml" ]; then
            echo "–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π inventory —Ñ–∞–π–ª"
            mkdir -p /tmp/kubespray-backup
            cp kubespray/inventory/hosts.yaml /tmp/kubespray-backup/
          fi
          
          # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é kubespray (–∫—Ä–æ–º–µ inventory)
          if [ -d "kubespray" ]; then
            echo "–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é Kubespray"
            rm -rf kubespray
          fi
          
          echo "–ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é Kubespray"
          git clone https://github.com/kubernetes-sigs/kubespray.git
          cd kubespray
          
          # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º inventory –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
          if [ -f "/tmp/kubespray-backup/hosts.yaml" ]; then
            echo "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º inventory —Ñ–∞–π–ª"
            mkdir -p inventory
            cp /tmp/kubespray-backup/hosts.yaml inventory/
          fi
          
          echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python"
          pip3 install -r requirements.txt

          echo "üîê –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

          echo "üåê –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–¥–∞–º"
          i=0
          MASTER_NODE=""
          for ip in $(yq eval '.all.hosts.*.ansible_host' ../kubespray/inventory/hosts.yaml); do
            echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ $ip"
            ssh-keyscan -H $ip >> ~/.ssh/known_hosts
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$ip "echo SSH connection successful" || {
              echo "::error::–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ $ip"
              exit 1
            }
             
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π IP –∫–∞–∫ –º–∞—Å—Ç–µ—Ä-–Ω–æ–¥—É
            if [ $i -eq 0 ]; then
              MASTER_NODE="$ip"
              i=1
            fi   
          done

          echo "üîç –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞"
              if ssh -i ~/.ssh/id_rsa ubuntu@$MASTER_NODE "sudo kubectl get nodes"; then
                echo "‚úÖ –ö–ª–∞—Å—Ç–µ—Ä Kubernetes —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                

                echo "üìã –ü–æ–ª—É—á–µ–Ω–∏–µ kubeconfig —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞"
                ssh -i ~/.ssh/id_rsa ubuntu@$MASTER_NODE "sudo cat /etc/kubernetes/admin.conf" > kubeconfig.yaml
                
                echo "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ kubeconfig"
                chmod 600 kubeconfig.yaml
                
                mkdir -p ~/.kube
                cp kubeconfig.yaml ~/.kube/config
                
                echo "üßπ –®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞"
                rm -f ~/.ssh/id_rsa
                exit 0
              fi

              echo "üî• –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ Kubespray Playbook (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω)"
              ansible-playbook -i ../kubespray/inventory/hosts.yaml cluster.yml \
                --private-key=~/.ssh/id_rsa \
                -u ubuntu \
                -b \
                --become-user=root \
                --ssh-common-args="-o StrictHostKeyChecking=no" || {
                  echo "::error::–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Kubernetes"
                  exit 1
                }

              echo "üìã –®–∞–≥ 7: –ü–æ–ª—É—á–µ–Ω–∏–µ kubeconfig"
              MASTER_NODE=$(yq eval '.all.hosts.*.ansible_host | select(. == "*master*" or . == "*control*") | .[0]' ../kubespray/inventory/hosts.yaml)
              ssh -i ~/.ssh/id_rsa ubuntu@$MASTER_NODE "sudo cat /etc/kubernetes/admin.conf" > kubeconfig.yaml
              
              echo "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ kubeconfig"
              chmod 600 kubeconfig.yaml
              
              mkdir -p ~/.kube
              cp kubeconfig.yaml ~/.kube/config
              
              echo "üßπ –®–∞–≥ 8: –û—á–∏—Å—Ç–∫–∞"
              rm -f ~/.ssh/id_rsa
              echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

      - name: üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è kubeconfig.yaml
        run: |
          if [ ! -f kubeconfig.yaml ]; then
            echo "::error::–§–∞–π–ª kubeconfig.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            ls -la
            exit 1
          else
            echo "–§–∞–π–ª kubeconfig.yaml –Ω–∞–π–¥–µ–Ω."
          fi        

      - name: üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ kubeconfig –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig.yaml
          retention-days: 1
          if-no-files-found: error

