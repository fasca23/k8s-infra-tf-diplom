name: Infrastructure Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action'
        required: true
        type: choice
        options:
          - terraform-plan
          - terraform-apply
          - terraform-destroy
          - deploy-kubernetes
      confirm:
        description: 'Type "yes" to confirm (required for apply/destroy/deploy)'
        required: false
        default: 'no'

jobs:
  terraform:
    name: 'Terraform Operations'
    if: contains(github.event.inputs.action, 'terraform')
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VAR_token: ${{ secrets.YC_TOKEN }}
      TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
      TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
      TF_VAR_s3_access_key: ${{ secrets.YC_S3_ACCESS_KEY }}
      TF_VAR_s3_secret_key: ${{ secrets.YC_S3_SECRET_KEY }}
      TF_VAR_s3_bucket_name: ${{ secrets.YC_S3_BUCKET_NAME }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="endpoint=https://storage.yandexcloud.net" \
            -backend-config="bucket=${{ secrets.YC_S3_BUCKET_NAME }}" \
            -backend-config="region=ru-central1" \
            -backend-config="access_key=${{ secrets.YC_S3_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.YC_S3_SECRET_KEY }}"

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: github.event.inputs.action == 'terraform-plan'
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event.inputs.action == 'terraform-apply' && github.event.inputs.confirm == 'yes'
        run: terraform apply -auto-approve tfplan

      - name: Save Inventory Artifact
        if: github.event.inputs.action == 'terraform-apply' && github.event.inputs.confirm == 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: kubespray-inventory
          path: kubespray/inventory/hosts.yaml
          retention-days: 1
          if-no-files-found: warn

      - name: Terraform Destroy Plan
        if: github.event.inputs.action == 'terraform-destroy' && github.event.inputs.confirm == 'yes'
        run: terraform plan -destroy -out=tfdestroy

      - name: Terraform Destroy
        if: github.event.inputs.action == 'terraform-destroy' && github.event.inputs.confirm == 'yes'
        run: terraform apply -auto-approve tfdestroy

  kubernetes:
    name: 'Deploy Kubernetes'
    needs: terraform
    if: github.event.inputs.action == 'deploy-kubernetes' && github.event.inputs.confirm == 'yes'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Download Inventory Artifact
        uses: actions/download-artifact@v4
        with:
          name: kubespray-inventory
          path: kubespray/inventory

      - name: Verify Inventory File
        run: |
          if [ ! -f kubespray/inventory/hosts.yaml ]; then
            echo "::error::Inventory file not found at kubespray/inventory/hosts.yaml"
            echo "Files in directory:"
            ls -la kubespray/inventory/ || true
            exit 1
          fi
          echo "Inventory file verified"

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt install -y python3-pip sshpass git
          pip3 install --upgrade pip ansible

      - name: Setup Kubespray
        run: |
          git clone https://github.com/kubernetes-sigs/kubespray.git || true
          cd kubespray
          git checkout release-2.23  # Используйте стабильную версию
          pip3 install -r requirements.txt

      - name: Configure SSH Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      - name: Test SSH Connections
        run: |
          cd kubespray
          ansible -i ../kubespray/inventory/hosts.yaml all -m ping \
            --private-key=~/.ssh/id_rsa \
            -u ubuntu

      - name: Deploy Kubernetes
        run: |
          cd kubespray
          ansible-playbook -i ../kubespray/inventory/hosts.yaml cluster.yml \
            --private-key=~/.ssh/id_rsa \
            -u ubuntu \
            -b \
            --become-user=root

      - name: Cleanup SSH Key
        run: rm -f ~/.ssh/id_rsa